deepdive {

  #pipeline.run: "layer1_0"
  #pipeline.pipelines.layer0_1: ["ext_variables1_layer0"]
  pipeline.pipelines.layer1_0: ["ext_variables0_layer1"]

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    variables0_layer0.value: Real
    variables0_layer1.value: Real
    variables0_layer2.value: Real
    variables0_layer3.value: Real
    variables0_layer4.value: Real
    variables0_layer5.value: Real
    variables0_layer6.value: Real
    variables0_layer_lr.value: Real
  }

  extraction.extractors: {
    ext_images {
      input: """SELECT 0"""
      output_relation: "images"
      udf: "python "${APP_HOME}"/udf/load_images.py"  # 55s # try "pypy ..."
      #udf: "python "${APP_HOME}"/udf/load_images_tsv.py"   #43s
      before: ${APP_HOME}"/udf/before_images.sh"
      parallelism: 1
      #style: "tsv_extractor"
    }
    ####### LAYER 0 -> Convolutional Layer #######
    ext_variables0_layer0 {
      input: """SELECT * from images"""
      output_relation: "variables0_layer0"
      udf: "python "${APP_HOME}"/udf/variables0_layer0.py"
      before: ${APP_HOME}"/udf/before_variables0_layer0.sh"
      parallelism: 5  #5->100s
      dependencies: ["ext_images"]
    }
    ext_variables1_layer0 {
      input: """SELECT image_id, fid, array_agg(x) as xs, array_agg(y) as ys
                FROM variables0_layer0 GROUP BY image_id,fid"""
      output_relation: "variables1_layer0"
      udf: "python "${APP_HOME}"/udf/variables1_layer0.py"
      before: ${APP_HOME}"/udf/before_variables1_layer0.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer0"]
    }

    ####### LAYER 1 -> Sub-Sampling Layer #######
    ext_variables0_layer1 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer0"""
      output_relation: "variables0_layer1"
      udf: "python "${APP_HOME}"/udf/variables0_layer1.py"
      before: ${APP_HOME}"/udf/before_variables0_layer1.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer0"]
    }
    ext_variables1_layer1 {
      input: """SELECT image_id, fid, array_agg(x) as xs, array_agg(y) as ys
                FROM variables0_layer1 GROUP BY image_id,fid"""
      output_relation: "variables1_layer1"
      udf: "python "${APP_HOME}"/udf/variables1_layer1.py"
      before: ${APP_HOME}"/udf/before_variables1_layer1.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer1"]
    }

    ####### LAYER 2 -> Convolutional Layer #######
    ext_variables0_layer2 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer1"""
      output_relation: "variables0_layer2"
      udf: "python "${APP_HOME}"/udf/variables0_layer2.py"
      before: ${APP_HOME}"/udf/before_variables0_layer2.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer1"]
    }
    ext_variables1_layer2 {
      input: """SELECT image_id, array_agg(fid) as fids, array_agg(x) as xs, array_agg(y) as ys
                FROM variables0_layer2 GROUP BY image_id"""
      output_relation: "variables1_layer2"
      udf: "python "${APP_HOME}"/udf/variables1_layer2.py"
      before: ${APP_HOME}"/udf/before_variables1_layer2.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer2"]
    }


    ####### LAYER 3 -> Sub-Sampling Layer #######
    ext_variables0_layer3 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer2"""
      output_relation: "variables0_layer3"
      udf: "python "${APP_HOME}"/udf/variables0_layer3.py"
      before: ${APP_HOME}"/udf/before_variables0_layer3.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer2"]
    }
    ext_variables1_layer3 {
      input: """SELECT image_id, fid, array_agg(x) as xs, array_agg(y) as ys
                FROM variables0_layer3 GROUP BY image_id,fid"""
      output_relation: "variables1_layer3"
      udf: "python "${APP_HOME}"/udf/variables1_layer3.py"
      before: ${APP_HOME}"/udf/before_variables1_layer3.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer3"]
    }

    ####### LAYER 4 -> Convolutional Layer #######
    ext_variables0_layer4 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer3"""
      output_relation: "variables0_layer4"
      udf: "python "${APP_HOME}"/udf/variables0_layer4.py"
      before: ${APP_HOME}"/udf/before_variables0_layer4.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer3"]
    }
    ext_variables1_layer4 {
      input: """SELECT image_id, array_agg(fid) as fids, array_agg(x) as xs, array_agg(y) as ys
                FROM variables0_layer4 GROUP BY image_id"""
      output_relation: "variables1_layer4"
      udf: "python "${APP_HOME}"/udf/variables1_layer4.py"
      before: ${APP_HOME}"/udf/before_variables1_layer4.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer4"]
    }

    ####### LAYER 5 -> Convolutional Layer #######
    ext_variables0_layer5 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer4"""
      output_relation: "variables0_layer5"
      udf: "python "${APP_HOME}"/udf/variables0_layer5.py"
      before: ${APP_HOME}"/udf/before_variables0_layer5.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer4"]
    }
    ext_variables1_layer5 {
      input: """SELECT image_id, array_agg(fid) as fids, array_agg(x) as xs, array_agg(y) as ys
                FROM variables0_layer5 GROUP BY image_id"""
      output_relation: "variables1_layer5"
      udf: "python "${APP_HOME}"/udf/variables1_layer5.py"
      before: ${APP_HOME}"/udf/before_variables1_layer5.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer5"]
    }




    ext_variables0_layer6 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer5"""
      output_relation: "variables0_layer6"
      udf: "python "${APP_HOME}"/udf/variables0_layer6.py"
      before: ${APP_HOME}"/udf/before_variables0_layer6.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer5"]
    }

    ext_variables0_layer_lr{
      input: """SELECT images.image_id AS image_id,x,y,fid,label
                FROM variables0_layer6, images
                WHERE images.image_id=variables0_layer6.image_id"""
      output_relation: "variables0_layer_lr"
      udf: "python "${APP_HOME}"/udf/variables0_layer_lr.py"
      before: ${APP_HOME}"/udf/before_variables0_layer_lr.sh"
      parallelism: 5  
      dependencies: ["ext_variables0_layer6"]
    }
  }


  inference.factors: {

    conv_layer0 {
      input_query: """
        SELECT  array_agg(v00.id) AS "variables0_layer0.ids",
                array_agg(v00.value) AS "variables0_layer0.values",
                v01.id AS "variables0_layer1.id",
                v01.value AS "variables0_layer1.value", 
                v01.fid AS fid
          FROM  variables0_layer0 v00,
                variables0_layer1 v01,
                (SELECT v10.id,v10.image_id,
                        v10.fid,v10.Bx,v10.By,
                        unnest(prev_ids) AS prev_id
                 FROM   variables1_layer0 AS v10) AS v10_unnested
         WHERE  v00.vector_id=v10_unnested.prev_id And
                v10_unnested.image_id=v01.image_id And
                v10_unnested.fid=v01.fid And
                v10_unnested.Bx=v01.x And
                v10_unnested.By=v01.y
      GROUP BY  v01.id, v01.value, v01.fid;
        """
      function: "Conv(variables0_layer0.values, variables0_layer1.value)"
      weight: "?(fid)[25]"  
    }

    sampling_layer1 {
      input_query: """
        SELECT  array_agg(v01.id) AS "variables0_layer1.ids",
                array_agg(v01.value) AS "variables0_layer1.values",
                v02.id AS "variables0_layer2.id",
                v02.value AS "variables0_layer2.value", 
                v02.fid AS fid
          FROM  variables0_layer1 v01,
                variables0_layer2 v02,
                (SELECT v11.id,v11.image_id,
                        v11.fid,v11.Bx,v11.By,
                        unnest(prev_ids) AS prev_id
                 FROM   variables1_layer1 AS v11) AS v11_unnested
         WHERE  v01.vector_id=v11_unnested.prev_id And
                v11_unnested.image_id=v02.image_id And
                v11_unnested.fid=v02.fid And
                v11_unnested.Bx=v02.x And
                v11_unnested.By=v02.y
      GROUP BY  v02.id, v02.value, v02.fid;
          """
      function: "Sampling(variables0_layer1.values, variables0_layer2.value)"
      weight: "?(fid)[4]"
    }

    conv_layer2 {
      input_query: """
        SELECT  array_agg(v02.id) AS "variables0_layer2.ids",
                array_agg(v02.value) AS "variables0_layer2.values",
                v03.id AS "variables0_layer3.id",
                v03.value AS "variables0_layer3.value", 
                v03.fid AS fid
          FROM  variables0_layer2 v02,
                variables0_layer3 v03,
                (SELECT v12.id,v12.image_id,
                        v12.fid,v12.Bx,v12.By,
                        unnest(prev_ids) AS prev_id
                 FROM   variables1_layer2 AS v12) AS v12_unnested
         WHERE  v02.vector_id=v12_unnested.prev_id And
                v12_unnested.image_id=v03.image_id And
                v12_unnested.fid=v03.fid And
                v12_unnested.Bx=v03.x And
                v12_unnested.By=v03.y
      GROUP BY  v03.id, v03.value, v03.fid;
          """
      function: "Conv(variables0_layer2.values, variables0_layer3.value)"
      weight: "?(fid)[100]" #4*25 
    }

    sampling_layer3 {
      input_query: """
        SELECT  array_agg(v03.id) AS "variables0_layer3.ids",
                array_agg(v03.value) AS "variables0_layer3.values",
                v04.id AS "variables0_layer4.id",
                v04.value AS "variables0_layer4.value", 
                v04.fid
          FROM  variables0_layer3 v03,
                variables0_layer4 v04,
                (SELECT v13.id,v13.image_id,
                        v13.fid,v13.Bx,v13.By,
                        unnest(prev_ids) AS prev_id
                 FROM   variables1_layer3 AS v13) AS v13_unnested
         WHERE  v03.vector_id=v13_unnested.prev_id And
                v13_unnested.image_id=v04.image_id And
                v13_unnested.fid=v04.fid And
                v13_unnested.Bx=v04.x And
                v13_unnested.By=v04.y
      GROUP BY  v04.id, v04.value, v04.fid;
          """
      function: "Sampling(variables0_layer3.values, variables0_layer4.value)"
      weight: "?(fid)[4]"
    }

    conv_layer4 {
      input_query: """
        SELECT  array_agg(v04.id) AS "variables0_layer4.ids",
                array_agg(v04.value) AS "variables0_layer4.values",
                v05.id AS "variables0_layer5.id",
                v05.value AS "variables0_layer5.value", 
                v05.fid
          FROM  variables0_layer4 v04,
                variables0_layer5 v05,
                (SELECT v14.id,v14.image_id,
                        v14.fid,v14.Bx,v14.By,
                        unnest(prev_ids) AS prev_id
                 FROM   variables1_layer4 AS v14) AS v14_unnested
         WHERE  v04.vector_id=v14_unnested.prev_id And
                v14_unnested.image_id=v05.image_id And
                v14_unnested.fid=v05.fid And
                v14_unnested.Bx=v05.x And
                v14_unnested.By=v05.y
      GROUP BY  v05.id, v05.value, v05.fid;
          """
      function: "Conv(variables0_layer4.values, variables0_layer5.value)"
      weight: "?(fid)[96]" #6*4*4 
    }

    conv_layer5 {
      input_query: """
        SELECT  array_agg(v05.id) AS "variables0_layer5.ids",
                array_agg(v05.value) AS "variables0_layer5.values",
                v06.id AS "variables0_layer6.id",
                v06.value AS "variables0_layer6.value", 
                v06.fid
          FROM  variables0_layer5 v05,
                variables0_layer6 v06,
                (SELECT v15.id,v15.image_id,
                        v15.fid,v15.Bx,v15.By,
                        unnest(prev_ids) AS prev_id
                 FROM   variables1_layer5 AS v15) AS v15_unnested
         WHERE  v05.vector_id=v15_unnested.prev_id And
                v15_unnested.image_id=v06.image_id And
                v15_unnested.fid=v06.fid And
                v15_unnested.Bx=v06.x And
                v15_unnested.By=v06.y
      GROUP BY  v06.id, v06.value, v06.fid;
          """
      function: "Conv(variables0_layer5.value, variables0_layer6.ids)"
      weight: "?(fid)[20]" #FIDs = 20 
    }

    softmax0 {
      input_query: """
        SELECT  v06.id AS "variables0_layer6.id",
                v06.value AS "variables0_layer6.value",
                v0lr.id AS "variables0_layer_lr.id",
                v0lr.value AS "variables0_layer_lr.value"
          FROM  variables0_layer6 v06, 
                variables0_layer_lr v0lr
          WHERE v0lr.class=0 And
                v0lr.image_id=v06.image_id And
                v0lr.x=v06.x And
                v0lr.y=v06.y And
                v0lr.fid=v06.fid 
        """
      function : "softmax(variables0_layer_lr.value,variables0_layer6.value)"
      weight   : "?"
    }

    logisticRegression {
      input_query: """
        SELECT  array_agg(v0lr.id) AS "variables0_layer_lr.ids",
                array_agg(v0lr.value) AS "variables0_layer_lr.values",
                v0lr.vector_id As "vector_id"
          FROM  variables0_layer_lr v0lr
      GROUP BY  v0lr.vector_id
        """
      function : "likelihood(variables0_layer_lr.values)"
      weight   : "0[1]"
    }

  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25

}








