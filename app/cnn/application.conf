deepdive {

 # pipeline.run: "inference"
#  pipeline.run: "l01"
#  pipeline.pipelines.l01: [conv_layer0,sampling_layer1]
 # pipeline.pipelines.inference: [conv_layer0, sampling_layer1,conv_layer2, sampling_layer3,conv_layer4,conv_layer5,softmax0,logisticRegression]

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    variables_layer0.value: Real
    variables_layer1.value: Real
    variables_layer2.value: Real
    variables_layer3.value: Real
    variables_layer4.value: Real
    variables_layer5.value: Real
    variables_layer6.value: Real
    variables_layer_lr.value: Real
  }

  extraction.extractors: {
    ext_images {
      input: """SELECT 0"""
      output_relation: "images"
      udf: "python "${APP_HOME}"/udf/load_images.py"  # 55s # try "pypy ..."
      #udf: "python "${APP_HOME}"/udf/load_images_tsv.py"   #43s
      before: ${APP_HOME}"/udf/before_images.sh"
      parallelism: 1
      #style: "tsv_extractor"
    }
    ####### LAYER 0 -> Convolutional Layer #######
    ext_variables_layer0 {
      input: """SELECT * from images"""
      output_relation: "variables_layer0"
      udf: "python "${APP_HOME}"/udf/variables_layer0.py"
      before: ${APP_HOME}"/udf/before_variables_layer0.sh"
      parallelism: 8
      dependencies: ["ext_images"]
    }

    ####### LAYER 1 -> Sub-Sampling Layer #######
     ext_variables_layer1 {
      input: """SELECT image_id, fid, array_agg(x) as xs, array_agg(y) as ys
                FROM variables_layer0 GROUP BY image_id,fid"""
      output_relation: "variables_layer1"
      udf: "python "${APP_HOME}"/udf/variables_layer1.py"
      before: ${APP_HOME}"/udf/before_variables_layer1.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer0"]
    }

    ####### LAYER 2 -> Convolutional Layer #######
    ext_variables_layer2 {
      input: """SELECT image_id, fid, array_agg(x) as xs, array_agg(y) as ys
                FROM variables_layer1 GROUP BY image_id,fid"""
      output_relation: "variables_layer2"
      udf: "python "${APP_HOME}"/udf/variables_layer2.py"
      before: ${APP_HOME}"/udf/before_variables_layer2.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer1"]
    }

    ####### LAYER 3 -> Sub-Sampling Layer #######
    ext_variables_layer3 {
      input: """SELECT image_id, array_agg(fid) as fids, array_agg(x) as xs, array_agg(y) as ys
                FROM variables_layer2 GROUP BY image_id"""
      output_relation: "variables_layer3"
      udf: "python "${APP_HOME}"/udf/variables_layer3.py"
      before: ${APP_HOME}"/udf/before_variables_layer3.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer2"]
    }

    ####### LAYER 4 -> Fully Connected Layer #######
    ext_variables_layer4 {
      input: """SELECT image_id, fid, array_agg(x) as xs, array_agg(y) as ys
                FROM variables_layer3 GROUP BY image_id,fid"""
      output_relation: "variables_layer4"
      udf: "python "${APP_HOME}"/udf/variables_layer4.py"
      before: ${APP_HOME}"/udf/before_variables_layer4.sh"
      parallelism: 8 
      dependencies: ["ext_variables_layer3"]
    }

    ####### LAYER 5 -> Fully Connected Layer #######
    ext_variables_layer5 {
      input: """SELECT image_id, array_agg(fid) as fids, array_agg(x) as xs, array_agg(y) as ys
                FROM variables_layer4 GROUP BY image_id"""
      output_relation: "variables_layer5"
      udf: "python "${APP_HOME}"/udf/variables_layer5.py"
      before: ${APP_HOME}"/udf/before_variables_layer5.sh"
      parallelism: 8  
      dependencies: ["ext_variables_layer4"]
    }

    ####### LAYER 6 -> Softmax Layer #######
    ext_variables_layer6 {
      input: """SELECT image_id, array_agg(fid) as fids, array_agg(x) as xs, array_agg(y) as ys
                FROM variables_layer5 GROUP BY image_id"""
      output_relation: "variables_layer6"
      udf: "python "${APP_HOME}"/udf/variables_layer6.py"
      before: ${APP_HOME}"/udf/before_variables_layer6.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer5"]
    }

    ####### LAYER 7 -> Softmax Layer #######
    ext_variables_layer_lr{
      input: """SELECT images.image_id AS image_id,x,y,fid,label
                FROM variables_layer6, images
                WHERE images.image_id=variables_layer6.image_id"""
      output_relation: "variables_layer_lr"
      udf: "python "${APP_HOME}"/udf/variables_layer_lr.py"
      before: ${APP_HOME}"/udf/before_variables_layer_lr.sh"
      parallelism: 8  
      dependencies: ["ext_variables_layer6"]
    }
  }


  inference.factors: {
    conv_layer0 {
      input_query: """
          SELECT  v1.image_id,
                  array_accum(v0.id ORDER BY v0.id) AS "variables_layer0.ids",
                  array_accum(v0.value ORDER BY v0.id) AS "variables_layer0.values",
                  v1.num_blocks AS "variables_layer0.num_blocks",
                  v1.lenght_blocks AS "variables_layer0.lenght_blocks",
                  v1.id AS "variables_layer1.id",
                  v1.value AS "variables_layer1.value",
                  v1.fid AS fid
            FROM  variables_layer0 v0,
                  variables_layer1 v1
           WHERE  v0.vector_id= ANY (v1.center_ids) AND
                  v0.image_id=v1.image_id
        GROUP BY  v1.image_id, v1.id, v1.value, v1.fid, v1.num_blocks, v1.lenght_blocks
        """
      function: "Conv(variables_layer0.values, variables_layer1.value)"
      weight: "?(fid)[25]"  
    }

    sampling_layer1 {
      input_query: """
        SELECT  v2.image_id,
                array_accum(v1.id ORDER BY v1.id) AS "variables_layer1.ids",
                array_accum(v1.value ORDER BY v1.id) AS "variables_layer1.values",
                v2.num_blocks AS "variables_layer1.num_blocks",
                v2.lenght_blocks AS "variables_layer1.lenght_blocks",
                v2.id AS "variables_layer2.id",
                v2.value AS "variables_layer2.value", 
                v2.fid AS fid

          FROM  variables_layer1 v1,
                variables_layer2 v2

         WHERE  v1.vector_id= ANY (v2.center_ids) AND 
                v1.image_id=v2.image_id
                
      GROUP BY  v2.image_id, v2.id, v2.value, v2.fid, v2.num_blocks, v2.lenght_blocks
          """
      function: "Sampling(variables_layer1.values, variables_layer2.value)"
      weight: "?(fid)[4]"
    }

    conv_layer2 {
      input_query: """
        SELECT  v3.image_id,
                array_accum(v2.id ORDER BY v2.id) AS "variables_layer2.ids",
                array_accum(v2.value ORDER BY v2.id) AS "variables_layer2.values",
                v3.num_blocks AS "variables_layer2.num_blocks",
                v3.lenght_blocks AS "variables_layer2.lenght_blocks",
                v3.id AS "variables_layer3.id",
                v3.value AS "variables_layer3.value", 
                v3.fid AS fid

          FROM  variables_layer2 v2,
                variables_layer3 v3

         WHERE  v2.vector_id= ANY (v3.center_ids) AND 
                v2.image_id=v3.image_id

      GROUP BY  v3.image_id, v3.id, v3.value, v3.fid, v3.num_blocks, v3.lenght_blocks
          """
      function: "Conv(variables_layer2.values, variables_layer3.value)"
      weight: "?(fid)[100]" #4*25 
    }

    sampling_layer3 {
      input_query: """
        SELECT  v4.image_id,
                array_accum(v3.id ORDER BY v3.id) AS "variables_layer3.ids",
                array_accum(v3.value ORDER BY v3.id) AS "variables_layer3.values",
                v4.num_blocks AS "variables_layer3.num_blocks",
                v4.lenght_blocks AS "variables_layer3.lenght_blocks",
                v4.id AS "variables_layer4.id",
                v4.value AS "variables_layer4.value", 
                v4.fid AS fid

          FROM  variables_layer3 v3,
                variables_layer4 v4

         WHERE  v3.vector_id= ANY (v4.center_ids) AND 
                v3.image_id=v4.image_id

      GROUP BY  v4.image_id, v4.id, v4.value, v4.fid, v4.num_blocks, v4.lenght_blocks
          """
      function: "Sampling(variables_layer3.values, variables_layer4.value)"
      weight: "?(fid)[4]"
    }

    conv_layer4 {
      input_query: """
        SELECT  v5.image_id,
                array_accum(v4.id ORDER BY v4.id) AS "variables_layer4.ids",
                array_accum(v4.value ORDER BY v4.id) AS "variables_layer4.values",
                v5.num_blocks AS "variables_layer4.num_blocks",
                v5.lenght_blocks AS "variables_layer4.lenght_blocks",
                v5.id AS "variables_layer5.id",
                v5.value AS "variables_layer5.value", 
                v5.fid AS fid

          FROM  variables_layer4 v4,
                variables_layer5 v5

         WHERE  v4.vector_id= ANY (v5.center_ids) AND 
                v4.image_id=v5.image_id

      GROUP BY  v5.image_id, v5.id, v5.value, v5.fid, v5.num_blocks, v5.lenght_blocks
          """
      function: "Conv(variables_layer4.values, variables_layer5.value)"
      weight: "?(fid)[96]" #6*4*4 
    }

    conv_layer5 {
      input_query: """
        SELECT  v6.image_id,
                array_accum(v5.id ORDER BY v5.id) AS "variables_layer5.ids",
                array_accum(v5.value ORDER BY v5.id) AS "variables_layer5.values",
                v6.num_blocks AS "variables_layer5.num_blocks",
                v6.lenght_blocks AS "variables_layer5.lenght_blocks",
                v6.id AS "variables_layer6.id",
                v6.value AS "variables_layer6.value", 
                v6.fid AS fid
                
          FROM  variables_layer5 v5,
                variables_layer6 v6

         WHERE  v5.vector_id= ANY (v6.center_ids) AND 
                v5.image_id=v6.image_id

      GROUP BY  v6.image_id, v6.id, v6.value, v6.fid, v6.num_blocks, v6.lenght_blocks
          """
      function: "Conv(variables_layer5.value, variables_layer6.ids)"
      weight: "?(fid)[20]" #FIDs = 20 
    }

    softmax0 {
      input_query: """
        SELECT  vlr.image_id,
                v6.id AS "variables_layer6.id",
                v6.value AS "variables_layer6.value",
                vlr.id AS "variables_layer_lr.id",
                vlr.value AS "variables_layer_lr.value"
          FROM  variables_layer6 v6, 
                variables_layer_lr vlr
          WHERE vlr.class=0 And
                vlr.image_id=v6.image_id And
                vlr.x=v6.x And
                vlr.y=v6.y And
                vlr.fid=v6.fid 
        """
      function : "softmax(variables_layer_lr.value,variables_layer6.value)"
      weight   : "?"
    }

    logisticRegression {
      input_query: """
        SELECT  vlr.vector_id As "vector_id",
                array_accum(vlr.id) AS "variables_layer_lr.ids",
                array_accum(vlr.value) AS "variables_layer_lr.values"
          FROM  variables_layer_lr vlr
      GROUP BY  vlr.vector_id
        """
      function : "likelihood(variables_layer_lr.values)"
      weight   : "0[1]"
    }

  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.0

}








