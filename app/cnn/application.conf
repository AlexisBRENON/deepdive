deepdive {

 # pipeline.run: "inference"
  # pipeline.run: "l01"
  # pipeline.pipelines.l01: [conv_layer0,sampling_layer1]
 # pipeline.pipelines.inference: [conv_layer0, sampling_layer1,conv_layer2, sampling_layer3,conv_layer4,conv_layer5,softmax0,logisticRegression]

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    variables_layer0.values: ArrayReal
    variables_layer1.values: ArrayReal
    variables_layer2.values: ArrayReal
    variables_layer3.values: ArrayReal
    variables_layer4.values: ArrayReal
    variables_layer5.values: ArrayReal
    variables_layer6.values: ArrayReal
    variables_layer_lr.values: ArrayReal
  }

  extraction.extractors: {
    ext_images {
      input: """SELECT 0"""
      output_relation: "images"
      udf: "python "${APP_HOME}"/udf/load_images.py"  # 55s # try "pypy ..."
      #udf: "python "${APP_HOME}"/udf/load_images_tsv.py"   #43s
      before: ${APP_HOME}"/udf/before_images.sh"
      parallelism: 1
      #style: "tsv_extractor"
    }
    ####### LAYER 0 -> Convolutional Layer #######
    ext_variables_layer0 {
      input: """SELECT * from images"""
      output_relation: "variables_layer0"
      udf: "python "${APP_HOME}"/udf/variables_layer0.py"
      before: ${APP_HOME}"/udf/before_variables_layer0.sh"
      parallelism: 8
      dependencies: ["ext_images"]
    }

    ext_conv_layer0_1{
      input: """SELECT v0.image_id, array_agg(v0.width) as w0, array_agg(v0.length) as l0
                FROM variables_layer0 as v0 GROUP BY v0.image_id"""
      output_relation: "conv_layer0_1"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 1 -o 4 -s 5 -l 1"
      before: ${APP_HOME}"/udf/before_conv_layer0_1.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer1"]
    }

    ####### LAYER 1 -> Sub-Sampling Layer #######
    ext_variables_layer1 {
      input: """SELECT image_id, array_agg(width) as ws, array_agg(length) as ls
                FROM variables_layer0 GROUP BY image_id"""
      output_relation: "variables_layer1"
      udf: "python "${APP_HOME}"/udf/variables_layer1.py"
      before: ${APP_HOME}"/udf/before_variables_layer1.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer0"]
    }

    ext_conv_layer1_2{
      input: """SELECT v1.image_id, array_agg(v1.width) as w0, array_agg(v1.length) as l0
                FROM variables_layer1 as v1 GROUP BY v1.image_id"""
      output_relation: "conv_layer1_2"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 4 -o 4 -s 2 -l 0"
      before: ${APP_HOME}"/udf/before_conv_layer1_2.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer2"]
    }

    ####### LAYER 2 -> Convolutional Layer #######
    ext_variables_layer2 {
      input: """SELECT image_id, array_agg(width) as ws, array_agg(length) as ls
                FROM variables_layer1 GROUP BY image_id"""
      output_relation: "variables_layer2"
      udf: "python "${APP_HOME}"/udf/variables_layer2.py"
      before: ${APP_HOME}"/udf/before_variables_layer2.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer1"]
    }

    ext_conv_layer2_3{
      input: """SELECT v2.image_id, array_agg(v2.width) as w0, array_agg(v2.length) as l0
                FROM variables_layer2 as v2 GROUP BY v2.image_id"""
      output_relation: "conv_layer2_3"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 4 -o 6 -s 5 -l 1"
      before: ${APP_HOME}"/udf/before_conv_layer2_3.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer3"]
    }

    ####### LAYER 3 -> Sub-Sampling Layer #######
    ext_variables_layer3 {
      input: """SELECT image_id, array_agg(width) as ws, array_agg(length) as ls
                FROM variables_layer2 GROUP BY image_id"""
      output_relation: "variables_layer3"
      udf: "python "${APP_HOME}"/udf/variables_layer3.py"
      before: ${APP_HOME}"/udf/before_variables_layer3.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer2"]
    }

    ext_conv_layer3_4{
      input: """SELECT v3.image_id, array_agg(v3.width) as w0, array_agg(v3.length) as l0
                FROM variables_layer3 as v3 GROUP BY v3.image_id"""
      output_relation: "conv_layer3_4"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 6 -o 6 -s 2 -l 0"
      before: ${APP_HOME}"/udf/before_conv_layer3_4.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer4"]
    }

    ####### LAYER 4 -> Fully Connected Layer #######
    ext_variables_layer4 {
      input: """SELECT image_id, array_agg(width) as ws, array_agg(length) as ls
                FROM variables_layer3 GROUP BY image_id"""
      output_relation: "variables_layer4"
      udf: "python "${APP_HOME}"/udf/variables_layer4.py"
      before: ${APP_HOME}"/udf/before_variables_layer4.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer3"]
    }

    ext_conv_layer4_5{
      input: """SELECT v4.image_id, array_agg(v4.width) as w0, array_agg(v4.length) as l0
                FROM variables_layer4 as v4 GROUP BY v4.image_id"""
      output_relation: "conv_layer4_5"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 6 -o 20 -s 4 -l 1"
      before: ${APP_HOME}"/udf/before_conv_layer4_5.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer5"]
    }

    ####### LAYER 5 -> Fully Connected Layer #######
    ext_variables_layer5 {
      input: """SELECT image_id, array_agg(width) as ws, array_agg(length) as ls
                FROM variables_layer4 GROUP BY image_id"""
      output_relation: "variables_layer5"
      udf: "python "${APP_HOME}"/udf/variables_layer5.py"
      before: ${APP_HOME}"/udf/before_variables_layer5.sh"
      parallelism: 8 
      dependencies: ["ext_variables_layer4"]
    }

    ext_conv_layer5_6{
      input: """SELECT v5.image_id, array_agg(v5.width) as w0, array_agg(v5.length) as l0
                FROM variables_layer5 as v5 GROUP BY v5.image_id"""
      output_relation: "conv_layer5_6"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 20 -o 1 -s 1 -l 1"
      before: ${APP_HOME}"/udf/before_conv_layer5_6.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer6"]
    }

    ####### LAYER 6 -> Softmax Layer #######
    ext_variables_layer6 {
      input: """SELECT image_id, array_agg(width) as ws, array_agg(length) as ls
                FROM variables_layer5 GROUP BY image_id"""
      output_relation: "variables_layer6"
      udf: "python "${APP_HOME}"/udf/variables_layer6.py"
      before: ${APP_HOME}"/udf/before_variables_layer6.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer5"]
    }

    ext_conv_layer6_lr{
      input: """SELECT v6.image_id, array_agg(v6.width) as w0, array_agg(v6.length) as l0
                FROM variables_layer6 as v6 GROUP BY v6.image_id"""
      output_relation: "conv_layer6_lr"
      udf: "python "${APP_HOME}"/udf/conv_layer.py -i 1 -o 1 -s 1 -l 1"
      before: ${APP_HOME}"/udf/before_conv_layer6_lr.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer6"]
    }

    ####### LAYER 7 -> Softmax Layer #######
    ext_variables_layer_lr{
      input: """SELECT images.image_id AS image_id,fid,label
                FROM variables_layer6, images
                WHERE images.image_id=variables_layer6.image_id"""
      output_relation: "variables_layer_lr"
      udf: "python "${APP_HOME}"/udf/variables_layer_lr.py"
      before: ${APP_HOME}"/udf/before_variables_layer_lr.sh"
      parallelism: 8
      dependencies: ["ext_variables_layer6"]
    }
  }




  inference.factors: {
    conv_layer0 {
      input_query: """
          SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer0.ids",
                  conv.center_locations AS "variables_layer0.locations",
                  count(*) AS "variables_layer0.num_ids",
                  v1.id AS "variables_layer1.id",
                  conv.location AS "variables_layer1.location",
                  v1.fid as fid

            FROM  variables_layer0 v0,
                  variables_layer1 v1,
                  conv_layer0_1 conv
           
           WHERE  conv.image_id=v1.image_id AND
                  conv.fid=v1.fid AND
                  conv.image_id=v0.image_id AND
                  v0.fid = ANY (conv.center_fids)

        GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
        """
      function: "Conv(variables_layer0.ids, variables_layer0.locations, variables_layer1.id, variables_layer1.location)"
     # Parameters of function: 1-The two dimensional array of values 2-Location of centers for the convolutions for each layer of values
     # 3-One dimensional array of values for the result of convolution function 4-Location for the value of answer in the result array
      weight: "?(fid)[25]"
      #Same array weights for same output fid.  
    }

    sampling_layer1 {
      input_query: """
          SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer1.ids",
                  conv.center_locations AS "variables_layer1.locations",
                  count(*) AS "variables_layer1.num_ids",
                  v1.id AS "variables_layer2.id",
                  conv.location AS "variables_layer2.location",
                  v1.fid as fid
                  
            FROM  variables_layer1 v0,
                  variables_layer2 v1,
                  conv_layer1_2 conv
           
           WHERE  conv.image_id=v1.image_id AND
                  conv.fid=v1.fid AND
                  conv.image_id=v0.image_id AND
                  v0.fid = ANY (conv.center_fids)

        GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
        """
      function: "Conv(variables_layer1.ids, variables_layer1.locations, variables_layer2.id, variables_layer2.location)"
      weight: "?(fid)[4]"
    }

    conv_layer2 {
      input_query: """
          SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer2.ids",
                  conv.center_locations AS "variables_layer2.locations",
                  count(*) AS "variables_layer2.num_ids",
                  v1.id AS "variables_layer3.id",
                  conv.location AS "variables_layer3.location",
                  v1.fid as fid
                  
            FROM  variables_layer2 v0,
                  variables_layer3 v1,
                  conv_layer2_3 conv
           
           WHERE  conv.image_id=v1.image_id AND
                  conv.fid=v1.fid AND
                  conv.image_id=v0.image_id AND
                  v0.fid = ANY (conv.center_fids)

        GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
        """
      function: "Conv(variables_layer2.ids, variables_layer2.locations, variables_layer3.id, variables_layer3.location)"
      weight: "?(fid)[100]" #4*25 
    }

    sampling_layer3 {
      input_query: """
          SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer3.ids",
                  conv.center_locations AS "variables_layer3.locations",
                  count(*) AS "variables_layer3.num_ids",
                  v1.id AS "variables_layer4.id",
                  conv.location AS "variables_layer4.location",
                  v1.fid as fid
                  
            FROM  variables_layer3 v0,
                  variables_layer4 v1,
                  conv_layer3_4 conv
           
           WHERE  conv.image_id=v1.image_id AND
                  conv.fid=v1.fid AND
                  conv.image_id=v0.image_id AND
                  v0.fid = ANY (conv.center_fids)

        GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
        """
      function: "Conv(variables_layer3.ids, variables_layer3.locations, variables_layer4.id, variables_layer4.location)"
      weight: "?(fid)[4]"
    }

    conv_layer4 {
      input_query: """
          SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer4.ids",
                  conv.center_locations AS "variables_layer4.locations",
                  count(*) AS "variables_layer4.num_ids",
                  v1.id AS "variables_layer5.id",
                  conv.location AS "variables_layer5.location",
                  v1.fid as fid
                  
            FROM  variables_layer4 v0,
                  variables_layer5 v1,
                  conv_layer4_5 conv
          
           WHERE  conv.image_id=v1.image_id AND
                  conv.fid=v1.fid AND
                  conv.image_id=v0.image_id AND
                  v0.fid = ANY (conv.center_fids)

        GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
        """
      function: "Conv(variables_layer4.ids, variables_layer4.locations, variables_layer5.id, variables_layer5.location)"
      weight: "?(fid)[96]" #6*4*4 
    }

    conv_layer5 {
      input_query: """
          SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer5.ids",
                  conv.center_locations AS "variables_layer5.locations",
                  count(*) AS "variables_layer5.num_ids",
                  v1.id AS "variables_layer6.id",
                  conv.location AS "variables_layer6.location",
                  v1.fid as fid
                    
            FROM  variables_layer5 v0,
                  variables_layer6 v1,
                  conv_layer5_6 conv
           
           WHERE  conv.image_id=v1.image_id AND
                  conv.fid=v1.fid AND
                  conv.image_id=v0.image_id AND
                  v0.fid = ANY (conv.center_fids)

          GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
          """
      function: "Conv(variables_layer5.ids, variables_layer5.locations, variables_layer6.id, variables_layer6.location)"
      weight: "?(fid)[20]" #FIDs = 20 
    }

    softmax0 {
      input_query: """
        SELECT  array_accum(v0.id ORDER BY v0.fid) AS "variables_layer6.ids",
                conv.center_locations AS "variables_layer6.locations",
                count(*) AS "variables_layer6.num_ids",
                v1.id AS "variables_layer_lr.id",
                conv.location AS "variables_layer_lr.location",
                
          FROM  variables_layer6 v0, 
                variables_layer_lr v1,
                conv_layer6_lr conv

         WHERE  conv.image_id=v1.image_id AND
                conv.fid=v1.fid AND
                conv.image_id=v0.image_id AND
                v0.fid = ANY (conv.center_fids)

      GROUP BY  v0.image_id, v1.id, conv.location, v1.fid, conv.center_locations
        """
      function : "softmax(variables_layer6.ids, variables_layer6.locations, variables_layer_lr.id, variables_layer_lr.location)"
      weight   : "?"
    }

    logisticRegression {
      input_query: """
        SELECT  array_accum(vlr.id) AS "variables_layer_lr.ids",
                (SELECT array_agg(i) FROM generate_series(0, 0) AS i) AS "variables_layer_lr.locations",
                count(*) AS "variables_layer_lr.num_ids",
                vlr.id AS "variables_layer_lr.id",
                0 AS "variables_layer_lr.location"

          FROM  variables_layer_lr vlr
          
      GROUP BY  vlr.image_id, vlr.fid, vlr.id
        """
      function : "likelihood(variables_layer_lr.ids, variables_layer_lr.locations, variables_layer_lr.id, variables_layer_lr.location)"
      weight   : "0"
    }
  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.0
}








