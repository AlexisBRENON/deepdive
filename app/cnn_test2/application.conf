deepdive {

  #pipeline.run: "layer1_0"
  #pipeline.pipelines.layer0_1: ["ext_variables1_layer0"]
  pipeline.pipelines.layer1_0: ["ext_variables0_layer1"]

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    variables0_layer0.value: Real
    variables0_layer1.value: Real
    variables0_layer2.value: Real
  }

  extraction.extractors: {
    ext_images {
      input: """SELECT 0"""
      output_relation: "images"
      udf: "python "${APP_HOME}"/udf/load_images.py"  # 55s # try "pypy ..."
      #udf: "python "${APP_HOME}"/udf/load_images_tsv.py"   #43s
      before: ${APP_HOME}"/udf/before_images.sh"
      parallelism: 1
      #style: "tsv_extractor"
    }

    ext_variables0_layer0 {
      input: """SELECT * from images"""
      output_relation: "variables0_layer0"
      udf: "python "${APP_HOME}"/udf/variables0_layer0.py"
      before: ${APP_HOME}"/udf/before_variables0_layer0.sh"
      parallelism: 5  #5->100s
      dependencies: ["ext_images"]
    }

    ext_variables1_layer0 {
      input: """SELECT image_id, array_agg(x) as xs, array_agg(y) as ys, array_agg(value) as values, array_agg(fid) as fids
                FROM variables0_layer0 GROUP BY image_id"""
      output_relation: "variables1_layer0"
      udf: "python "${APP_HOME}"/udf/variables1_layer0.py"
      before: ${APP_HOME}"/udf/before_variables1_layer0.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer0"]
    }

    ext_variables0_layer1 {
      input: """SELECT image_id,Bx,By,fid
                FROM variables1_layer0"""
      output_relation: "variables0_layer1"
      udf: "python "${APP_HOME}"/udf/variables0_layer1.py"
      before: ${APP_HOME}"/udf/before_variables0_layer1.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer0"]
    }
    ext_variables1_layer1 {
      input: """SELECT image_id, array_agg(x) as xs, array_agg(y) as ys, array_agg(value) as values, array_agg(fid) as fids
                FROM variables0_layer1 GROUP BY image_id"""
      output_relation: "variables1_layer1"
      udf: "python "${APP_HOME}"/udf/variables1_layer1.py"
      before: ${APP_HOME}"/udf/before_variables1_layer1.sh"
      parallelism: 5  #5->400s
      dependencies: ["ext_variables0_layer1"]
    }
    ext_variables0_layer2_reg {
      input: """SELECT images.image_id AS image_id,Bx,By,fid,label
                FROM variables1_layer1, images
                WHERE images.image_id=variables1_layer1.image_id"""
      output_relation: "variables0_layer2"
      udf: "python "${APP_HOME}"/udf/variables0_layer2_reg.py"
      before: ${APP_HOME}"/udf/before_variables0_layer2_reg.sh"
      parallelism: 5  #5->151s
      dependencies: ["ext_variables1_layer1"]
    }
  }


  inference.factors: {
    conv_layer0 {
      input_query: """
        SELECT  array_agg(v00.id) AS "variables0_layer0.ids",
                array_agg(v00.value) AS "variables0_layer0.values",
                v01.id AS "variables0_layer1.id",
                v01.value AS "variables0_layer1.value", 
                v00.fid
          FROM  variables0_layer0 v00,
                variables0_layer1 v01,
                (SELECT v10.id,v10.image_id,
                        v10.fid,v10.Bx,v10.By,
                        unnest(prev_ids) AS prev_id,
                        generate_subscripts(prev_ids, 1) AS pos
                 FROM   variables1_layer0 AS v10) AS v10_unnested
         WHERE  v00.image_id=v10_unnested.image_id And
                v00.fid=v10_unnested.fid And
                v00.vector_id=v10_unnested.prev_id And
                v10_unnested.image_id=v01.image_id And
                v10_unnested.fid=v01.fid And
                v10_unnested.Bx=v01.x And
                v10_unnested.By=v01.y
        GROUP BY v01.id, v01.value, v00.fid;
        """
      function: "Conv(variables0_layer1.value, variables0_layer0.values)"
      weight: "?(fid)[9]"  
    }
    conv_layer1 {
      input_query: """
        SELECT  array_agg(v01.id) AS "variables0_layer1.ids",
                array_agg(v01.value) AS "variables0_layer1.values",
                v02.id AS "variables0_layer2.id",
                v02.value AS "variables0_layer2.value", 
                v01.fid
        FROM    variables0_layer1 v01,
                variables0_layer2 v02,
                (SELECT v11.id,v11.image_id,
                        v11.fid,v11.Bx,v11.By,
                        unnest(prev_ids) AS prev_id,
                        generate_subscripts(prev_ids, 1) AS pos
                 FROM   variables1_layer1 AS v11) AS v11_unnested
        WHERE   v01.image_id=v11_unnested.image_id And
                v01.fid=v11_unnested.fid And
                v01.vector_id=v11_unnested.prev_id And
                v11_unnested.image_id=v02.image_id And
                v11_unnested.fid=v02.fid And
                v11_unnested.Bx=v02.x And
                v11_unnested.By=v02.y
        GROUP BY v02.id, v02.value, v01.fid;
          """
      function: "Conv(variables0_layer2.value, variables0_layer1.values)"
      weight: "?(fid)[4]"  
    }

    LogisticRegression {
      input_query: """
        SELECT  v02.id AS "variables0_layer2.id",
                v02.value AS "variables0_layer2.value"
          FROM  variables0_layer2 v02;
        """
      function : "likelihood(variables0_layer2.value)"
      weight   : -1
    }
  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.0

}





